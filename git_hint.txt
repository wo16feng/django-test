显示当前目录    pwd
显示目录当前所有的文件 及时间  ll
上一级目录  cd ..
创建文件夹  mkdir xxxname
进入当前的子目录  cd xxxname
显示所有文件包括隐藏文件 ls -a
清理工作目录  clear
cd ~：回到用户家目录(个人用户目录)
!!：是执行和显示上一条命令的结果
删除文件  rm name

添加文件到版本库 echo 'git repo2' >> test.txt
>> 是管道追加的意思 (追加git repo2 到test文件里面)

展示当前文件的内容 cat test.txt

配置用户信息
git config --global user.name "wo16feng"
git config --global user.email "328515384@qq.com"

git仓库
初始化版本库 -  git init

添加文件到版本库
添加(暂存区)  git add
提交(版本区)  git commit -m '描述'

查看仓库状态  git status

把暂存区的修改取消回滚 git reset HEAD test.txt
清理工作区 把工作区文件恢复原先模样  git checkout -- test.txt

获取提交版本的key    git log
回滚到对应的版本   git reset hard keyxxx

删除文件 git rm test.txt(本地删除)
所以要提交 git commit

删除暂存区 git rm --cached

git复制：Ctrl+insert
git粘贴：Shift+Insert



创建ssh key  分享代码 多人合作
ssh-keygen -t rsa -C "328515384@qq.com"
cd ~   				到用户目录
cd .ssh 			进入存取目录
cat id_rsa.pub   	查看ssh key  公钥
ssh -T git@github.com  判断本地与github是否连通

添加远程仓库
git remote add origin https://github.com/wo16feng/honor.git(http)
本地仓库跟远程仓库关联起来
git pull origin master
将本地仓库的文件push到远程仓库
git push -u origin master 　(-u默认把本地的master与远程的master关联起来)　

已经关联了 origin  需要把旧的删除
git remote -v 查看远程库信息
git remote rm origin(删除关联的origin的远程库)
git remote add origin git@github.com:wo16feng/django-test.git

vim README.md 修改.md文件
按 i 字母进入插入（insert）状态
先按esc键，退出插入模式，然后按住shift键，并连按两次z字符，即可保存刚才的编辑并退出vim编辑状态！！！


克隆仓库 (本地要克隆的位置 不能有.git文件)
git clone git@github.com:wo16feng/django-test.git 克隆到本地
git push(不需要 -u origin master 克隆下来已经绑定了)


标签管理
git tag  查看所有标签
创建标签  git tag name
指定提交信息 git tag -a name -m 'commit'
删除标签 git tag -d name
标签发布远程 git push origin name
删除远程 git push origin :refs/tags/name 


分支管理
git branch name 创建一个分支  并命名
查看所有分支 git branch (*表示在那个分支上)
切换到指定分支  git checkout name
合并 需要切换到 master的分支上
git merge name (要合并的分支)
删除分支 git branch -d name


远程分支（remote branch）
#查看远程分支   git branch -r
#拉取远程分支并创建本地分支(映射关系)   git checkout -b 本地分支 origin/远程分支
-b 是创建新分支，并没有同步远程分支，应该不要加的。不加是创建并同步

该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout 
本地分支不会和远程分支建立映射关系
git fetch origin 远程分支名x:本地分支名x 
全部取回本地：git fetch

#拉取远程分支   git pull origin 远程分支
#建立分支(建立映射关系的作用)       git branch --set-upstream-to origin/远程分支名  本地分支名
git remote show origin  #查看远程分支和本地分支的对应关系
git remote prune origin #删除远程仓库已经删除过的分支